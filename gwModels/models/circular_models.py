#! /usr/bin/env python
#-*- coding: utf-8 -*-
#==============================================================================
#
#    FILE: circular_models.py
#
#    AUTHOR: Tousif Islam
#    CREATED: 11-01-2024
#    LAST MODIFIED: 
#    REVISION: ---
#==============================================================================
__author__ = "Tousif Islam"

import sys, os
import warnings
warnings.filterwarnings("ignore", "Wswiglal-redir-stdio")
import matplotlib.pyplot as plt
import numpy as np

import gwsurrogate
sur = gwsurrogate.LoadSurrogate('NRHybSur3dq8')

class genBHPTNRSur1dq1e4:
    """
    Class to generate waveforms using the BHPTNRSur1dq1e4 model.
    """

    def __init__(self, model):
        """
        Initialize the genBHPTNRSur1dq1e4 object.

        Parameters:
        model : BHPTNRSur1dq1e4
            An instance of the BHPTNRSur1dq1e4 surrogate model.
        """
        # Instantiate surrogate model
        self.model = model

    def _generate_raw_BHPTNRSur1dq1e4(self, model, params):
        """
        Generate raw BHPTNRSur1dq1e4 waveforms directly from the gwsurrogate library.

        Parameters:
        model : BHPTNRSur1dq1e4
            The surrogate model to be used for generating waveforms.
        params : dict
            Dictionary containing parameters for the waveform generation,
            including mass ratio 'q'.

        Returns:
        tuple
            A tuple containing:
                - modes: The modes of the generated waveforms.
                - times: Time array for the generated waveforms.
                - hp: Plus polarization of the gravitational waveform.
                - hc: Cross polarization of the gravitational waveform.
        """
        modes, times, hp, hc = model(q=params["q"], 
                                     ell=[2, 2, 3, 3, 4, 4], 
                                     m=[2, 1, 3, 2, 4, 3], 
                                     mode_sum=False, 
                                     fake_neg_modes=False)
        return modes, times, hp, hc

    def _process_BHPTNRSur1dq1e4_output(self, modes, hp, hc):
        """
        Process the output of BHPTNRSur1dq1e4 waveforms into a format
        compatible with gwNRHME.

        Parameters:
        modes : list
            List of modes generated by the waveform model.
        hp : ndarray
            Plus polarization waveforms.
        hc : ndarray
            Cross polarization waveforms.

        Returns:
        dict
            A dictionary mapping mode labels to the complex strain waveforms.
        """
        hdict = {}
        flag = 0
        for mode in modes:
            hdict['h_l%dm%d' % (mode[0], mode[1])] = hp[:, flag] + 1j * hc[:, flag]
            flag += 1
        return hdict

    def generate_BHPTNRSur1dq1e4(self, model, params):
        """
        Generate BHPTNRSur1dq1e4 waveforms from gwsurrogate.

        Parameters:
        model : BHPTNRSur1dq1e4
            The surrogate model used for generating waveforms.
        params : dict
            Dictionary containing parameters for the waveform generation.

        Returns:
        tuple
            A tuple containing:
                - t_sur: Time array of the generated waveforms.
                - h_sur: Dictionary of generated waveforms with mode labels.
        """
        # Raw output
        modes, times, hp, hc = self._generate_raw_BHPTNRSur1dq1e4(model, params)
        # Process output
        t_sur = times
        h_sur = self._process_BHPTNRSur1dq1e4_output(modes, hp, hc)
        return t_sur, h_sur


class genNRHybSur3dq8:
    """
    Class to generate waveforms using the NRHybSur3dq8 model.
    """

    def __init__(self):
        """
        Initialize the genNRHybSur3dq8 object and load the surrogate model.
        """
        # Instantiate surrogate model
        self.sur = gwsurrogate.LoadSurrogate('NRHybSur3dq8')

    def _generate_raw_NRHybSur3dq8(self, params):
        """
        Generate raw NRHybSur3dq8 waveforms from gwsurrogate.

        Parameters:
        params : dict
            Dictionary containing parameters for waveform generation, including
            mass ratio 'q' and spins 's1z' and 's2z'.

        Returns:
        tuple
            A tuple containing:
                - t: Time array for the generated waveforms.
                - h: Dictionary of generated waveforms.
        """
        # Mass ratio
        q = params["q"]
        # Spins
        for key in ["s1z", "s2z"]:
            if key not in params:
                # If the key doesn't exist, add it with a value of zero
                params[key] = 0
        chiA = [0, 0, params["s1z"]]
        chiB = [0, 0, params["s2z"]]
        # Step size in time
        dt = 0.1    
        # Initial frequency (Units of cycles/M)
        # 0.99 is just to ensure the circular waveform is slightly longer
        # than the eccentric one
        f_low = 0.99 * (params['x0'] ** (3/2)) / (np.pi)   
        # 'dyn' stands for dynamics and is always None for this model
        t, h, dyn = sur(q, chiA, chiB, dt=dt, f_low=f_low)        
        return t, h
    
    def _process_NRHybSur3dq8_output(self, t, h):
        """
        Process the output of NRHybSur3dq8 waveforms into a format
        compatible with gwNRHME.

        Parameters:
        t : ndarray
            Time array of the generated waveforms.
        h : dict
            Dictionary of waveforms generated by the NRHybSur3dq8 model.

        Returns:
        tuple
            A tuple containing:
                - t_sur: Time array of the processed waveforms.
                - h_sur: Dictionary of processed waveforms with mode labels.
        """
        t_sur = t
        h_sur = {}
        h_sur['h_l2m1'] = h[(2, 1)]
        
        for mode in h.keys():
            if mode != (2, 1) and mode[1] > 0:
                h_sur['h_l%dm%d' % (mode[0], mode[1])] = h[mode]
        return t_sur, h_sur

    def generate_NRHybSur3dq8(self, params):
        """
        Generate NRHybSur3dq8 waveforms from gwsurrogate.

        Parameters:
        params : dict
            Dictionary containing parameters for waveform generation.

        Returns:
        tuple
            A tuple containing:
                - t_sur: Time array of the generated waveforms.
                - h_sur: Dictionary of generated waveforms with mode labels.
        """
        # Raw output
        t, h = self._generate_raw_NRHybSur3dq8(params)
        # Process output
        t_sur, h_sur = self._process_NRHybSur3dq8_output(t, h)
        return t_sur, h_sur
